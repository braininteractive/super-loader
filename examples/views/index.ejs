<!doctype html>
<html>
<head>
    <title> Example: load-stl </title>
</head>
<body>  

<input type="file" id="inputFile" multiple />

<script src="//apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"></script>
<script src="/javascripts/three.js"></script>
<!--<script src="/javascripts/super-loader.min.js"></script>
   -->
<script src="http://localhost:4000/super-loader.js"></script>
<script src="/javascripts/size.js"></script> 
<script>  

    var scene, camera, renderer;
    var material, mesh;

    init();
    animate();

    function init() {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera( 40, 800 / 600, 1, 10000 );
        camera.position.z = 500;
        material = new THREE.MeshPhongMaterial({ color: 0x666666 });
        renderer = new THREE.WebGLRenderer({
            antialias: true
        });
        var light = new THREE.AmbientLight( 0xffffff, 1 );
        scene.add( light );

        var dirLight = new THREE.DirectionalLight( 0xffffff, 2);
        scene.add( light );

        renderer.setSize( 800, 600 );
        renderer.setClearColor( 0xf9f9f9 );
        document.body.appendChild( renderer.domElement );
    }

    function animate() {
        requestAnimationFrame( animate );
        if( mesh ) mesh.rotation.x += 0.01;
        // if( mesh ) mesh.rotation.y += 0.01;
        // if( mesh ) mesh.rotation.z += 0.01;
        renderer.render( scene, camera );
    }

    document.getElementById('inputFile').addEventListener('change', upload);

    function range( min, max, step ) {
        var t = [];
        for( var i = min; i < max; i += step ){
            t.push( i );
        }
        return t;
    }

    var reduction = range( 1, 2, 1 );

    function upload ( event ){
        Array.from( event.target.files ).forEach( file => {
            var all = reduction.map( index => {
                return generatorTestCase( file, index );
            });
            console.time( 'loader' );
            Promise.race( all ).then(( file ) => {
                // var endTime = new Date() - 0;
                // console.timeEnd( 'loader' );
                // scene.add( file.mesh );
            //     $.get('/records', {
            //         "reduction": 1000,
            //         "name": file.name.slice( 0, -4 ),
            //         "time": 0,
            //         "size": file.size
            //     }, function ( data ){
            //         renderer.clear();  
            //     }); 
            });
        }); 

        THREE.Object3D.prototype.clear = function(){
            let children = this.children;
            for(let i = children.length-1;i>=0;i--){
                let child = children[i];
                if( child instanceof THREE.Mesh || child instanceof THREE.Group){
                    child.clear();
                    this.remove( child );
                }
            }
        };

        function generatorTestCase ( file, reduction ){
            return new Promise(( resolve, reject ) => {
                var t = superLoader( file, {
                    "reduction": 1,
                    "noColor": true
                });

                t.on('initial', ( event, _mesh ) => {
                    console.log('initial');
                    _mesh.material = material;
                    scene.add( _mesh );
                    mesh = _mesh;
                }); 

                t.on('update', function ( event, _mesh ){
                    console.log('update');
                    mesh = _mesh;
                    scene.add( _mesh );
                }); 

                // t.on('progress', function (){
                // });

                // t.on('finish', function (){
                // });
            });  
        }
    }
</script>
</body>
</html>